#pragma checksum "F:\ZufaSystems\ChatBot_Fyp\ChatBot_Fyp\ChatBot_Fyp\Views\Chatbot\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "89c31e84c2302eb0c54846d03cba2faa87dd81ee"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Chatbot_Index), @"mvc.1.0.view", @"/Views/Chatbot/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\ZufaSystems\ChatBot_Fyp\ChatBot_Fyp\ChatBot_Fyp\Views\_ViewImports.cshtml"
using ChatBot_Fyp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\ZufaSystems\ChatBot_Fyp\ChatBot_Fyp\ChatBot_Fyp\Views\_ViewImports.cshtml"
using ChatBot_Fyp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"89c31e84c2302eb0c54846d03cba2faa87dd81ee", @"/Views/Chatbot/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"87e776ed4d35777624c575c280003c0b6cc36ef0", @"/Views/_ViewImports.cshtml")]
    public class Views_Chatbot_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("form-start"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "F:\ZufaSystems\ChatBot_Fyp\ChatBot_Fyp\ChatBot_Fyp\Views\Chatbot\Index.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "89c31e84c2302eb0c54846d03cba2faa87dd81ee4077", async() => {
                WriteLiteral(@"
    <title>ChatBot</title>
    <style>
        html {
            font-family: Arial, sans-serif;
            font-size: 16px;
        }

        body {
            min-height: 100vh;
            background: #ffffff;
            background: -moz-linear-gradient(-45deg, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -webkit-gradient(left top, right bottom, color-stop(0%, rgba(255, 255, 255, 1)), color-stop(47%, rgba(246, 246, 246, 1)), color-stop(100%, rgba(237, 237, 237, 1)));
            background: -webkit-linear-gradient(-45deg, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -o-linear-gradient(-45deg, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -ms-linear-gradient(-45deg, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: linear-gradient(135deg, r");
                WriteLiteral(@"gba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ededed', GradientType=1);
        }

        h2,
        h3 {
            margin: 0;
            padding: 0;
        }

        h1 {
        }

        h2 {
            font-size: 1rem;
            font-weight: 400;
        }

        hr {
            margin: 15px 0;
        }

        .bg-dark {
            background: hsl(231, 50%, 50%);
        }

        .bg-light {
            background: hsla(231, 10%, 90%, 0.8);
        }

        .text-light {
            color: #f0f0f0;
        }

        .align-center {
            text-align: center;
        }

        /*** NAV ***/

        nav#nav-container {
            background: #f0f0f0;
            padding: 15px;
            position: absolute;
            z-index: 1;
            right: 0;
            top: 0;
            box-siz");
                WriteLiteral(@"ing: border-box;
        }

        ul.nav {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .nav-link {
            padding: 2px 0;
            margin: 8px 0;
            font-size: .9rem;
            position: relative;
            padding-left: 40px;
        }

            .nav-link > span {
                margin-right: 10px;
                position: absolute;
                left: 0;
            }


        a,
        button,
        .link,
        .nav-link {
            cursor: pointer;
        }

        .btn-transparent {
            border: 0;
            background: 0;
        }

        .btn-icon {
            font-size: 1.5rem;
            width: 100%;
        }

        /**************************/

        /*** Display fake phone ***/

        /**************************/

        #phone-wrapper {
            margin: 50px auto;
            background: url(""https://cdn.pixabay.com/photo/2017/06/17/1");
                WriteLiteral(@"0/39/cell-phone-2411808_960_720.png"") 0 0;
            /*background: url(""https://cdn.pixabay.com/photo/2017/06/17/10/39/cell-phone-2411808_960_720.png"") -418px 0px;*/
            background-repeat: no-repeat;
            background-position: 0px 0px;
            width: 363px;
            height: 720px;
            position: relative;
            overflow: hidden;
        }

        #app {
            background: #ffffff;
            background-image: url(""https://www.transparenttextures.com/patterns/asfalt-light.png"");
            position: relative;
            top: 47px;
            left: 19px;
            height: 608px;
            width: 325px;
            display: grid;
            grid-template-rows: 50px 1fr auto;
        }

        /*** Start Chat overlay ***/

        div#landing {
            position: absolute;
            z-index: 1;
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            padding: 15px;
            display:");
                WriteLiteral(@" grid;
            grid-template-rows: 1fr 1fr 1fr;
            text-align: center;
        }

        span.fas.fa-robot {
            align-self: end;
        }

        input#username {
            font-size: 1.1rem;
            line-height: 2.5rem;
            text-align: center;
            border-radius: 5px;
            border: solid 1px #00000087;
            margin: 15px 0;
            width: 100%;
        }

        form#form-start {
            align-self: end;
        }

        #start-chat {
            background: #FF9800;
            border: none;
            padding: 15px 30px;
            font-size: 1.2rem;
            color: #ffffff;
            border-radius: 5px;
            width: 100%;
        }

        /********************/

        /*** Main chat UI ***/

        /********************/

        #header,
        #form {
            display: grid;
            grid-template-columns: 50px auto 50px;
            align-items: center;
        }

");
                WriteLiteral(@"        #header {
            padding: 6px;
        }

        /* Conversation */

        #message-board {
            display: grid;
            align-self: end;
            grid-auto-rows: minmax(min-content, max-content);
            padding: 5px 0;
            box-sizing: border-box;
            max-height: 100%;
            overflow-x: hidden;
            overflow-y: scroll;
        }

        .post {
            position: relative;
            margin: 4px 10px;
            padding: 10px;
            border-radius: 10px;
            font-size: .9rem;
            word-break: break-word;
        }

        .post-user {
            justify-self: left;
            margin-right: 50px;
            background: rgba(255, 152, 0, 0.1);
            /*border-top-left-radius: 0;*/
        }

        .post-bot {
            justify-self: right;
            margin-left: 50px;
            background: rgba(64, 83, 191, 0.1);
            /*border-top-right-radius: 0;*/
        }

");
                WriteLiteral(@"        .post:after {
            content: '';
            position: absolute;
            right: -10px;
            top: 10px;
            width: 0;
            height: 0;
            border: 10px solid transparent;
            border-top: 0;
        }

        .post-user:after {
            left: -10px;
            border-right-color: rgba(255, 152, 0, 0.1);
            border-left: 0;
        }

        .post-bot:after {
            right: -10px;
            border-left-color: rgba(64, 83, 191, 0.1);
            border-right: 0;
        }

        .timestamp {
            font-size: .6em;
            opacity: .4;
            margin: 5px 0 -5px;
            display: block;
        }

        /* Chat Form */

        #form {
            padding: 6px;
            /*min-height: 40px;*/
            grid-template-rows: auto 1fr;
        }

        #emoijis {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: repeat(7, 1fr);
   ");
                WriteLiteral(@"         padding: 5px;
            grid-gap: 5px;
            margin-bottom: 5px;
        }

        #message {
            padding: 5px;
            font-size: 1rem;
            min-height: 25px;
            max-height: 25vh;
            overflow: auto;
            background: rgba(0, 0, 0, 0.05);
            color: black;
            font-style: italic;
            outline: none;
            resize: none;
        }

        #form.focus {
            background: rgba(255, 152, 0, 0.1);
        }

        #message.focus {
            background: rgba(255, 255, 255, 0.5);
        }

        /* Custom Scrollbar */

        ::-webkit-scrollbar {
            width: 5px;
        }

        ::-webkit-scrollbar-track {
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: hsl(231, 50%, 50%, 10%);
            border-radius: 10px;
        }

            ::-webkit-scrollb");
                WriteLiteral(@"ar-thumb:hover {
                background: #b30000;
            }

        /***************/

        /*** Credits ***/

        /***************/

        .credits {
            text-align: center;
            font-size: small;
            color: #b2b2b2;
        }

            .credits a {
                color: inherit;
            }
    </style>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "89c31e84c2302eb0c54846d03cba2faa87dd81ee14000", async() => {
                WriteLiteral("\r\n    <div id=\"phone-wrapper\">\r\n        <div id=\"app\">\r\n            <div id=\"landing\" class=\"bg-dark text-light\"");
                BeginWriteAttribute("style", " style=\"", 8836, "\"", 8844, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                <span class=\"fas fa-robot fa-4x\"></span>\r\n                <div>\r\n                    <h1 class=\"mt-3\">ChatBot</h1>\r\n                </div>\r\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "89c31e84c2302eb0c54846d03cba2faa87dd81ee14724", async() => {
                    WriteLiteral("\r\n                    <input type=\"text\" name=\"username\" id=\"username\"");
                    BeginWriteAttribute("value", " value=\"", 9112, "\"", 9120, 0);
                    EndWriteAttribute();
                    WriteLiteral(" placeholder=\"Your name\" required>\r\n                    <button type=\"submit\" id=\"start-chat\">Start chat</button>\r\n                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
            </div>
            <div id=""header"" class=""bg-dark"">
                <div><button id=""back-button"" class=""text-light btn-transparent btn-icon fas fa-arrow-left""></button></div>
                <div class=""text-light align-center"">
                    <h2>ChatBot</h2>
                </div>
                <div>
                    <button id=""nav-icon"" class=""text-light btn-transparent btn-icon fas fa-bars""></button>
                    <nav id=""nav-container"" style=""display: none;"">
                        <ul class=""nav"">
                            <li id=""search"" class=""nav-link""><span class=""fas fa-search""></span>Search</li>
                            <li id=""clear-history"" class=""nav-link""><span class=""fas fa-trash-alt""></span>Clear history</li>
                            <li id=""theme"" class=""nav-link""><span class=""fas fa-cogs""></span>Settings</li>
                            <hr>
                            <li id=""sign-out"" class=""nav-link""><span class=""fas fa-sign-out-a");
                WriteLiteral(@"lt""></span>Sign out</li>
                        </ul>
                    </nav>
                </div>
            </div>
            <div id=""message-board"">


            </div>
            <div id=""form"" class=""bg-light"">
                <div id=""emoijis"" style=""display: none;"">
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-beam""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-wink""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-tongue""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-tongue-wink""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-kiss-wink-heart""></span></button>
                ");
                WriteLiteral(@"    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-hearts""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-surprise""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-angry""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-tired""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-sad-tear""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-grin-squint-tears""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-sad-cry""></span></button>
                    <button class=""smiley btn-transparent btn-icon""><span class=""far fa-dizzy""></span></button>
                </div>
                <div><button id=""emoi"" class=""btn-transparent btn-icon far fa-grin""></");
                WriteLiteral(@"button></div>
                <div id=""message"" placeholder=""Type your message here"" rows=""1"" contenteditable></div>
                <div><button id=""send"" type=""button"" class=""btn-transparent btn-icon fas fa-paper-plane""></button></div>
            </div>
        </div>
    </div>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"" crossorigin=""anonymous"">
    <script>
        $(document).ready(() => {
            /******************/
            /*** START CHAT ***/
            /******************/


            // set visitor name
            let $userName = """";

            // start chatbox
            $(""#form-start"").on(""submit"", (event) => {
                event.preventDefault();
                $userName = $(""#username"").val();
                $(""#landing"").slideUp(300);
                setTimeout(() => {
                    $(""#start-chat"").");
                WriteLiteral(@"html(""Continue chat"")
                }, 300);
            });




            /*****************/
            /*** USER CHAT ***/
            /*****************/


            // Post a message to the board
            function $postMessage() {
                $(""#message"").find(""br"").remove();
                let $message = $(""#message"").html().trim(); // get text from text box
                $message = $message.replace(/<div>/, ""<br>"").replace(/<div>/g, """").replace(/<\/div>/g, ""<br>"").replace(/<br>/g, "" "").trim();
                if ($message) { // if text is not empty
                    const html = `<div class=""post post-user"">${$message + timeStamp()}</span></div>`; // convert post to html
                    $(""#message-board"").append(html); // add post to board
                    $scrollDown(); // stay at bottom of chat
                    botReply($message);
                };
                $(""#message"").empty();
            };

            // Chat input
            $(");
                WriteLiteral(@"""#message"").on(""keyup"", (event) => {
                if (event.which === 13) $postMessage(); // Use enter to send
            }).on(""focus"", () => {
                $(""#message"").addClass(""focus"");
            }).on(""blur"", () => {
                $(""#message"").removeClass(""focus"");
            });
            $(""#send"").on(""click"", $postMessage);




            /**********************/
            /*** AUTO REPLY BOT ***/
            /**********************/


            function botReply(userMessage) {
                const reply = generateReply(userMessage);
                if (typeof reply === ""string"") postBotReply(reply);
                else reply.forEach((str) => postBotReply(str));
            };

            function generateReply(userMessage) {
                const message = userMessage.toLowerCase();
                var reply = [`Sorry, I don't understand you.`, `Please try again`];
                var model = { Question: message, Answer: """" };

                //ene");
                WriteLiteral(@"rate some different replies
                if (/^hi$|^hell?o|^howdy|^hoi|^hey|^ola/.test(message)) reply = [`Hi ${$userName}`, `What can I do for you?`];
                else if (/complain/.test(message)) reply = ['its Our Complain Form, you can submit your complain here', '<input type=""button"" value=""Complain Form"" class=""btn btn-success"" onclick=""ComplainForm()""/>'];
                else if (/help|sos|emergency|support/.test(message)) reply = [`I am here to help.`, `What seems to be the problem?`];
                else if (/how|what|why/.test(message)) reply = userMessage + "" what?"";
                else if (/^huh+|boring|lame|wtf|pff/.test(message)) reply = [`<span class=""far fa-dizzy fa-2x""></span>`, `I'm sorry you feel that way`, `How can I make it better?`];
                else if (/bye|ciao|adieu|salu/.test(message)) reply = [`Ok, bye :)`];
                else if (/How are you?/.test(message)) reply = [`I am fine what about you?`];
                else if (/fine|good|me too|alright/.test(mes");
                WriteLiteral(@"sage)) reply = [`Great what can i do for you?`];
                else if (/What’s up?/.test(message)) reply = [`Nothing what about you?`];
                else if (/Tell me something/.test(message)) reply = [`Feel free to askme anything.`];
                else if (/shop/.test(message)) reply = [`Whats the shop name?`];
                else {
                    var model = { Question: message, Answer: """" };
                    debugger;
                    $.ajax({
                        url: ""/Chatbot/BotResponse"",
                        type: ""POST"",
                        contentType: ""application/json;charset=utf-8"",
                        data: JSON.stringify(model),
                        dataType: ""json"",
                        async:false,
                        success: function (result) {
                            debugger;
                            if (result.status == ""success"")
                            {
                                reply = result.data.answer;");
                WriteLiteral(@"
                            }
                        },
                        error: function (errormessage) {
                        }
                    });
                }
                return reply;
            };

            function postBotReply(reply) {
                const html = `<div class=""post post-bot"">${reply + timeStamp()}</div>`;
                const timeTyping = 5000 + Math.floor(Math.random() * 5000);
                $(""#message-board"").append(html);
                $scrollDown();
            };



            /******************/
            /*** TIMESTAMPS ***/
            /******************/


            function timeStamp() {
                const timestamp = new Date();
                const hours = timestamp.getHours();
                let minutes = timestamp.getMinutes();
                if (minutes < 10) minutes = ""0"" + minutes;
                const html = `<span class=""timestamp"">${hours}:${minutes}</span>`;
                return html;
");
                WriteLiteral(@"            };




            /***************/
            /*** CHAT UI ***/
            /***************/


            // Back arrow button
            $(""#back-button"").on(""click"", () => {
                $(""#landing"").show();
            });


            // Menu - navigation
            $(""#nav-icon"").on(""click"", () => {
                $(""#nav-container"").show();
            });

            $(""#nav-container"").on(""mouseleave"", () => {
                $(""#nav-container"").hide();
            });

            $("".nav-link"").on(""click"", () => {
                $(""#nav-container"").slideToggle(200);
            });

            // Clear history
            $(""#clear-history"").on(""click"", () => {
                $(""#message-board"").empty();
                $(""#message"").empty();
            });

            // Sign out
            $(""#sign-out"").on(""click"", () => {
                $(""#message-board"").empty();
                $(""#message"").empty();
                $(""#l");
                WriteLiteral(@"anding"").show();
                $(""#username"").val("""");
                $(""#start-chat"").html(""Start chat"");
            });

            $(""#start-chat"").click(function () {
                $userName = $('#username').val();
                let $message = 'Hello';
                ///                const html = `<div class=""post post-user"">${$message + timeStamp()}</span></div>`; // convert post to html
                ///                $(""#message-board"").append(html); // add post to board
                $scrollDown(); // stay at bottom of chat
                botReply($message);

                $(""#message"").empty();
            });


            /*********************/
            /*** SCROLL TO END ***/
            /*********************/


            function $scrollDown() {
                const $container = $(""#message-board"");
                const $maxHeight = $container.height();
                const $scrollHeight = $container[0].scrollHeight;
                if ($scr");
                WriteLiteral(@"ollHeight > $maxHeight) $container.scrollTop($scrollHeight);
            }




            /***************/
            /*** EMOIJIS ***/
            /***************/


            // toggle emoijis
            $(""#emoi"").on(""click"", () => {
                $(""#emoijis"").slideToggle(300);
                $(""#emoi"").toggleClass(""fa fa-grin far fa-chevron-down"");
            });

            // add emoiji to message
            $("".smiley"").on(""click"", (event) => {
                const $smiley = $(event.currentTarget).clone().contents().addClass(""fa-lg"");
                $(""#message"").append($smiley);
                $(""#message"").select(); // ==> BUG: message field not selected after adding smiley !!
            });





        });

        function ComplainForm() {
            window.location.href = ""/Chatbot/ComplainForm"";
        }

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
